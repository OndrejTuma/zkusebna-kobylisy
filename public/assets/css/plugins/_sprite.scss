/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$robo-calendar-name: 'robo-calendar';
$robo-calendar-x: 294px;
$robo-calendar-y: 0px;
$robo-calendar-offset-x: -294px;
$robo-calendar-offset-y: 0px;
$robo-calendar-width: 104px;
$robo-calendar-height: 210px;
$robo-calendar-total-width: 398px;
$robo-calendar-total-height: 210px;
$robo-calendar-image: '../images/sprite.png';
$robo-calendar: (294px, 0px, -294px, 0px, 104px, 210px, 398px, 210px, '../images/sprite.png', 'robo-calendar', );
$robo-current-name: 'robo-current';
$robo-current-x: 0px;
$robo-current-y: 0px;
$robo-current-offset-x: 0px;
$robo-current-offset-y: 0px;
$robo-current-width: 147px;
$robo-current-height: 210px;
$robo-current-total-width: 398px;
$robo-current-total-height: 210px;
$robo-current-image: '../images/sprite.png';
$robo-current: (0px, 0px, 0px, 0px, 147px, 210px, 398px, 210px, '../images/sprite.png', 'robo-current', );
$robo-rules-name: 'robo-rules';
$robo-rules-x: 147px;
$robo-rules-y: 0px;
$robo-rules-offset-x: -147px;
$robo-rules-offset-y: 0px;
$robo-rules-width: 147px;
$robo-rules-height: 210px;
$robo-rules-total-width: 398px;
$robo-rules-total-height: 210px;
$robo-rules-image: '../images/sprite.png';
$robo-rules: (147px, 0px, -147px, 0px, 147px, 210px, 398px, 210px, '../images/sprite.png', 'robo-rules', );
$spritesheet-width: 398px;
$spritesheet-height: 210px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($robo-calendar, $robo-current, $robo-rules, );
$spritesheet: (398px, 210px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
